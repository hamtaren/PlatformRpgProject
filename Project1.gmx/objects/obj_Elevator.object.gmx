<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Elevator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_Solid</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();      //isSolid

///ZMIENNE
state = ELEVATOR_MOVE;  //Stany akcji windy STOP/WAIT/MOVE
spd = 3;                //szybkosc poruszania sie windy
waypoint = noone;       //referencja na obiekt, ktory robi za przystanek, zawrotke itp.
dir = ELEVATOR_UP;    //W ktora strone winda leci UP, DOWN, NONE
auto = true;            //czy automatycznie jezdzi gora/dol, czy trzeba uruchomic dzwignia lub tym podobnym mechanizmem
waitTime = 3*room_speed;//ile winda czeka
smooth = 10;            //wygladzanie zblizania sie do waypointa
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mechanika windy
if (state == ELEVATOR_MOVE)
{
    direction = dir;
    
    var _spd = distance_to_point(waypoint.x,waypoint.y) / smooth;
    _spd = clamp(_spd,-spd,spd);
    
    if (distance_to_point(waypoint.x,waypoint.y)&gt; 1)
        speed = _spd;
    else
        state = ELEVATOR_WAIT;
}
else if (state == ELEVATOR_WAIT)
{
    dir = waypoint.dir;
    waypoint = noone;
    for (var i = 32; i&lt;room_height; i++)        
    {
        waypoint = instance_place(x,y+i,obj_WaypointElevator);
        if (waypoint!=noone)
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
