//ctrl+f TODO

obj_Elevator : obj_Solid
{
	CREATE()
	{
		//binding the waypoints to the elevator
		scr_ElevatorBindWaypoints();
	}
	
	STEP()
	{
		if (state == ELEVATOR_MOVE)
		{
			if (waypoint!=noone)
			{
				var smoothSpd = distance_to_point(waypoint.x,waypoint.y) / smooth;
				smoothSpd = clamp(smoothSpd,-spd,spd);
				y += lengthdir_y(smoothSpd,dir);//sprawdzic czy dziala w przeciwnym razie speed = smoothSpd; direction = dir;
				
			}
			else //nie ma waypointa
			{
				debug_log("Winda nie ma waypointa",DEBUG_ERROR);
				state == ELEVATOR_STOP;
			}
			
			if (place_meeting(x,y-spd,obj_Hero))
			{
				var hero = obj_Hero;
				hero.y = y - offsetY; //sprawdz czy bedzie mogl podskoczyc
				//TODO: pokombinowac co zrobic zeby nie wtopil sie w sufit/róg
			}
		}
	}	
}
//wedlug Pomysłu wywływać to powinien obj_Binder, wiec nazwa zmieni sie na scr_BinderBindElevatorToWaypoints() i zrobione przy pomocy with (obj_Elevator)...
scr_ElevatorBindWaypoints()
{
	//under elevator
	for(var i = y; i < room_height; i+=16)
	{
		var waypoint = instance_place(x,i,obj_WaypointElevator);
		//if there is a waypoint and is not bound
		if (waypoint != noone && waypoint.bind == noone)		
			waypoint.bind = id;//(this)?
	}
	//above elevator
	for(var i = y; i>0; i+=16)
	{
		var waypoint = instance_place(x,i,obj_WaypointElevator);
		if (waypoint != noone && waypoint.bind == noone)
			waypoint.bind = id;//this?
	}
}

scr_ElevatorFindNextWapoint()
{	
	//under elevator
	if (dir == ELEVATOR_DOWN)
		for(var i = y; i < room_height; i+=16)
		{
			var waypoint = instance_place(x,i,obj_WaypointElevator);
			//if there is a waypoint
			if (waypoint != noone)
			{
				this.waypoint = waypoint; //sprawdzic czy nie bedzie sie pieprzyc, w przeciwnym wpadku zmienic w elevatorze zmienna waypoint na nextWaypoint i te linijke na: nextWaypoint = waypoint;
				exit;
			}
		}
		//above elevator
	else if (dir == ELEVATOR_UP)
		for(var i = y; i < room_height; i+=16)
		{
			var waypoint = instance_place(x,i,obj_WaypointElevator);
			if (waypoint != noone)
			{
				this.waypoint = waypoint; //sprawdzic czy nie bedzie sie pieprzyc...
				exit;
			}
		}
	debug_log("nie znaleziono zadnego waypointu",DEBUG_WARN);
}

//TODO: obj_HeroStats (albo jakos tak), ktory bedzie przechowywał informacje o satystykach bohatera z pokoju do pokoju
obj_HeroStats
{
	Persistent = true;
	CREATE()
	{
	//scr_HeroStatsVariablesInit():
		Health = 0;
		MaxHealth =0;
	}
}

//spadanie
if (vspd == _maxFallSpeed && !deathFall)
{
	if (deathFallCounter>=deathFallCounterCount)
	{
			debug_log("Przy upadku bedzie dead",DEBUG_INFO);
			deathFall = true;
	}
	else
		deathFallCounter++;
}
else
	deathFallCounter = 0;

//upadek
if (place_meeting_solid(x,y+vspd) && deathFall)
{
	scr_HeroDeath();	//smierc
	deathFall = false;	//juz nie spada
}

//skrypt umierania
scr_HeroDeath()
{
	if (!obj_DebugController.GodMode)
		dead = true;
	debug_log("DEATH",DEBUG_ERROR);
}

//elevator
//kontakt z jakas postacia i przesuwanie jej
if (place_meeting(x+hspd,y+vspd,obj_Actor))
{
	var actor = instance_place(x+hspd,y+vspd,obj_Actor);
	with(actor)
	{
	//ktoras z ponizszych wersji jest poprawniejsza, trzeba wytestowac ktora
		if (!place_meeting_solid(x+hspd+other.hspd,y+vspd+other.vspd))
		if (!place_meeting_solid(x+other.hspd, y+other.vspd))
		{
			x+=other.hspd;
			y+=other.vspd;
		}
		else
		{
			debug_log("DEATH",DEBUG_WARN);
			dead = true;
		}
	}					
}	
























